#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab11
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ADO.NET")]
	public partial class LinqMyDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertregions_list(regions_list instance);
    partial void Updateregions_list(regions_list instance);
    partial void Deleteregions_list(regions_list instance);
    partial void Insertcity_list(city_list instance);
    partial void Updatecity_list(city_list instance);
    partial void Deletecity_list(city_list instance);
    #endregion
		
		public LinqMyDbDataContext() : 
				base(global::Lab11.Properties.Settings.Default.ADO_NETConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqMyDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqMyDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqMyDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqMyDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<regions_list> regions_list
		{
			get
			{
				return this.GetTable<regions_list>();
			}
		}
		
		public System.Data.Linq.Table<city_list> city_list
		{
			get
			{
				return this.GetTable<city_list>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.regions_list")]
	public partial class regions_list : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _region_ID;
		
		private string _region_name;
		
		private EntitySet<city_list> _city_list;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onregion_IDChanging(int value);
    partial void Onregion_IDChanged();
    partial void Onregion_nameChanging(string value);
    partial void Onregion_nameChanged();
    #endregion
		
		public regions_list()
		{
			this._city_list = new EntitySet<city_list>(new Action<city_list>(this.attach_city_list), new Action<city_list>(this.detach_city_list));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int region_ID
		{
			get
			{
				return this._region_ID;
			}
			set
			{
				if ((this._region_ID != value))
				{
					this.Onregion_IDChanging(value);
					this.SendPropertyChanging();
					this._region_ID = value;
					this.SendPropertyChanged("region_ID");
					this.Onregion_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_name", DbType="VarChar(25)")]
		public string region_name
		{
			get
			{
				return this._region_name;
			}
			set
			{
				if ((this._region_name != value))
				{
					this.Onregion_nameChanging(value);
					this.SendPropertyChanging();
					this._region_name = value;
					this.SendPropertyChanged("region_name");
					this.Onregion_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="regions_list_city_list", Storage="_city_list", ThisKey="region_ID", OtherKey="region_id")]
		public EntitySet<city_list> city_list
		{
			get
			{
				return this._city_list;
			}
			set
			{
				this._city_list.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_city_list(city_list entity)
		{
			this.SendPropertyChanging();
			entity.regions_list = this;
		}
		
		private void detach_city_list(city_list entity)
		{
			this.SendPropertyChanging();
			entity.regions_list = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.city_list")]
	public partial class city_list : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _city_id;
		
		private System.Nullable<int> _region_id;
		
		private string _city_name;
		
		private EntityRef<regions_list> _regions_list;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncity_idChanging(int value);
    partial void Oncity_idChanged();
    partial void Onregion_idChanging(System.Nullable<int> value);
    partial void Onregion_idChanged();
    partial void Oncity_nameChanging(string value);
    partial void Oncity_nameChanged();
    #endregion
		
		public city_list()
		{
			this._regions_list = default(EntityRef<regions_list>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int city_id
		{
			get
			{
				return this._city_id;
			}
			set
			{
				if ((this._city_id != value))
				{
					this.Oncity_idChanging(value);
					this.SendPropertyChanging();
					this._city_id = value;
					this.SendPropertyChanged("city_id");
					this.Oncity_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region_id", DbType="Int")]
		public System.Nullable<int> region_id
		{
			get
			{
				return this._region_id;
			}
			set
			{
				if ((this._region_id != value))
				{
					if (this._regions_list.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onregion_idChanging(value);
					this.SendPropertyChanging();
					this._region_id = value;
					this.SendPropertyChanged("region_id");
					this.Onregion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city_name", DbType="VarChar(100)")]
		public string city_name
		{
			get
			{
				return this._city_name;
			}
			set
			{
				if ((this._city_name != value))
				{
					this.Oncity_nameChanging(value);
					this.SendPropertyChanging();
					this._city_name = value;
					this.SendPropertyChanged("city_name");
					this.Oncity_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="regions_list_city_list", Storage="_regions_list", ThisKey="region_id", OtherKey="region_ID", IsForeignKey=true)]
		public regions_list regions_list
		{
			get
			{
				return this._regions_list.Entity;
			}
			set
			{
				regions_list previousValue = this._regions_list.Entity;
				if (((previousValue != value) 
							|| (this._regions_list.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._regions_list.Entity = null;
						previousValue.city_list.Remove(this);
					}
					this._regions_list.Entity = value;
					if ((value != null))
					{
						value.city_list.Add(this);
						this._region_id = value.region_ID;
					}
					else
					{
						this._region_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("regions_list");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
